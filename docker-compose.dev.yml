services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: globegenius-postgres
    environment:
      POSTGRES_USER: globegenius
      POSTGRES_PASSWORD: dev_password_change_in_prod
      POSTGRES_DB: globegenius_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U globegenius"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: globegenius-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service ML Python (FastAPI)
  ml-service:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: globegenius-ml
    environment:
      PYTHONUNBUFFERED: 1
      DATABASE_URL: postgresql://globegenius:dev_password_change_in_prod@postgres:5432/globegenius_dev
      REDIS_URL: redis://redis:6379
    ports:
      - "8000:8000"
    volumes:
      - ./ml:/app
      - ml_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: globegenius-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://globegenius:dev_password_change_in_prod@postgres:5432/globegenius_dev
      REDIS_URL: redis://redis:6379
      ML_SERVICE_URL: http://ml-service:8000
      JWT_SECRET: dev_jwt_secret_change_in_prod
      JWT_REFRESH_SECRET: dev_jwt_refresh_secret_change_in_prod
      ENCRYPTION_KEY: dev_encryption_key_32_chars_long!!
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml-service:
        condition: service_started
    command: npm run dev

  # Frontend React (pour développement intégré)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: globegenius-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_ENV: development
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm start

  # PGAdmin pour visualiser la DB (optionnel)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: globegenius-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@globegenius.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

  # Mailhog pour tester les emails en local
  mailhog:
    image: mailhog/mailhog:latest
    container_name: globegenius-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    
volumes:
  postgres_data:
  redis_data:
  ml_models:
  pgadmin_data:

networks:
  default:
    name: globegenius-network